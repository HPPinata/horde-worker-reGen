# Stage 1: Base environment setup
FROM ubuntu:24.04 AS base

USER root
WORKDIR /

ARG DEBIAN_FRONTEND=noninteractive
ARG PYTHON_VERSION=3.11
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV APP_HOME=/horde-worker-reGen

# Add Intel repo
RUN apt-get update && \
    apt-get install -y gpg gpg-agent wget && \
    wget -qO- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor -o /usr/share/keyrings/oneapi-archive-keyring.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list

# Install dependencies
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get install -y --no-install-recommends \
    python${PYTHON_VERSION} \
    python3-pip \
    python${PYTHON_VERSION}-venv \
    python${PYTHON_VERSION}-dev \
    python${PYTHON_VERSION}-distutils \
    intel-deep-learning-essentials-2025.0 \
    git && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Stage 2: Clone repository and install dependencies
FROM base AS builder

ARG GIT_BRANCH=main
ARG GIT_OWNER=Haidra-Org

RUN echo "export GIT_BRANCH=${GIT_BRANCH}" >> /env_vars && \
    echo "export GIT_OWNER=${GIT_OWNER}" >> /env_vars && \
    echo ". /opt/intel/oneapi/compiler/2025.0/env/vars.sh" >> /env_vars && \
    echo ". /opt/intel/oneapi/umf/0.9/env/vars.sh" >> /env_vars && \
    echo ". /opt/intel/oneapi/pti/0.10/env/vars.sh" >> /env_vars

# Clone the repository
RUN git clone https://github.com/${GIT_OWNER}/horde-worker-reGen.git ${APP_HOME} && \
    cd ${APP_HOME} && \
    git switch ${GIT_BRANCH}

# Create virtual environment
RUN . /env_vars && printenv && \
    python${PYTHON_VERSION} -m venv ${APP_HOME}/venv
ENV PATH="${APP_HOME}/venv/bin:$PATH"

# Install dependencies
ARG PIP_CACHE_DIR=/pip-cache

RUN --mount=type=cache,target=${PIP_CACHE_DIR},sharing=locked,id=pip-cache \
    . /env_vars && printenv && \
    pip install --cache-dir=${PIP_CACHE_DIR} intel-extension-for-pytorch==2.6.10+xpu oneccl_bind_pt==2.6.0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/ && \
    pip install --cache-dir=${PIP_CACHE_DIR} opencv-python-headless -r ${APP_HOME}/requirements.ipex.txt -U --extra-index-url https://download.pytorch.org/whl/xpu

# Stage 3: Final stage
FROM builder AS final

WORKDIR ${APP_HOME}
COPY entrypoint.sh /entrypoint.sh
COPY setup_*.sh ${APP_HOME}
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
